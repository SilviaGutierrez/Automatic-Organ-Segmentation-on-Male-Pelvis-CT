function [diceResult,haussdorffResult,IoUResult,TrainingTime,Time4Validation]=mainExperiment1(path)
    % mainExperiment1 - Perform prostate segmentation using deep learning.
    %
    % Syntax: mainProstateSegmentation(path)
    %
    % Inputs:
    %   path - Path to the main experiment directory containing 'Images' and 'Labels' folders.
    %   Example: path='C:\Users\silva\Desktop\Experiment_1';

    % Author information
    fprintf('Author: Silvia Ramos (gutierrezramossilvia@gmail.com)\n');
    fprintf('Co-author: Miguel Altuve (miguelaltuve@gmail.com)\n');
    fprintf('2024\n\n');

    % Display experiment directory
    fprintf('Experiment directory: %s\n', path);

    % Load image and label data
    fprintf('Loading image and label data...\n');
    ImgDir = fullfile(path, 'Images');
    LabDir = fullfile(path, 'Labels');
    ImgDs = imageDatastore(ImgDir, 'FileExtensions', '.dcm', 'ReadFcn', @(x) dicomread(x));
    LabDs = imageDatastore(LabDir, 'FileExtensions', '.dcm', 'ReadFcn', @(x) dicomread(x));
    fprintf('Image and label data loaded successfully.\n\n');

    % Create k-fold cross-validation partitions
    fprintf('Performing k-fold cross-validation...\n');
    c = cvpartition(numel(ImgDs.Files), 'KFold', 10);
    TrainIdx = cell(c.NumTestSets, 1);
    ValIdx = cell(c.NumTestSets, 1);
    for k = 1:c.NumTestSets
    TrainIdx{k} = training(c, k);
    ValIdx{k} = test(c, k);
    end
    save('cross_validation_indices.mat', 'TrainIdx', 'ValIdx');
    fprintf('Number of folds: %d\n\n', c.NumTestSets);

    % Variable memory allocation
    diceResult = cell(c.NumTestSets, 1);
    haussdorffResult = cell(c.NumTestSets, 1);
    IoUResult = cell(c.NumTestSets, 1);
    TrainingTime = zeros(c.NumTestSets, 1); % Time during the training phase for each iteration
    Time4Validation = cell(c.NumTestSets, 1); % Time during the validation phase for each iteration

    for k = 1:c.NumTestSets
        fprintf('Iteration %d/%d\n', k, c.NumTestSets);

        % Get training and validation indices for the current fold
        TrainIdx = training(c, k);
        ValIdx = test(c, k);
        
        % Split data into training and validation sets
        TrainImages = ImgDs.Files(TrainIdx);
        TrainLabels = LabDs.Files(TrainIdx);
        ValImages = ImgDs.Files(ValIdx);
        ValLabels = LabDs.Files(ValIdx);

        % Perform data augmentation on training data
        fprintf('Performing data augmentation...\n');
        performDataAugmentation(TrainImages, TrainLabels, path);
        fprintf('Data augmentation complete.\n\n');
        
        % Load augmented train image and train label data
        fprintf('Loading image and label data...\n'); %%% modificar
        AugTrainImgDir = fullfile(path, 'AugmentedTrainImages');
        AugTrainLabDir = fullfile(path, 'AugmentedTrainLabels');
        AugTrainImagesDs = imageDatastore(AugTrainImgDir, 'FileExtensions', '.dcm', 'ReadFcn', @(x) dicomread(x));
        AugTrainLabelsDs = imageDatastore(AugTrainLabDir, 'FileExtensions', '.dcm', 'ReadFcn', @(x) dicomread(x));
        AugTrainImages=AugTrainImagesDs.Files;
        AugTrainLabels=AugTrainLabelsDs.Files;
        fprintf('Image and label data loaded successfully.\n\n');
    
        % Setup training and validation datastores
        fprintf('Setting up datastores...\n');
        TrainDs = setupTrainDatastore(TrainImages,TrainLabels,AugTrainImages,AugTrainLabels);
        [ValDs,ValImgDs,ValLabelDs] = setupValDatastore(ValImages, ValLabels);
        fprintf('Datastores set up successfully.\n\n');

       % Define and train the deep learning model
       fprintf('Defining and training the deep learning model...\n');
       lgraph = deeplabv3plusLayers([512, 512], 2, 'resnet18');
       options = setupTrainingOptions(ValDs);

       fprintf('Training network...\n');
        
       [TrainingTime,path_folder_iteration]=train(TrainDs,lgraph, options,path,k);
       TrainingTime(k) = TrainingTime;
       fprintf('Training complete.\n\n');

        
       % Perform validation and calculate metrics
       fprintf('Performing validation and calculating metrics...\n');
       [DiceResult, HaussdorffDist, Iou, validationTimes] = calculateMetrics(ValImgDs,ValLabelDs,path_folder_iteration);
       diceResult{k} = DiceResult;
       haussdorffResult{k} = HaussdorffDist;
       IoUResult{k} = Iou;
       Time4Validation{k} = num2cell(validationTimes);
       fprintf('Validation complete.\n\n');

       % Clean up temporary augmentation folders
       fprintf('Cleaning up temporary augmentation folders...\n');
       cleanupTemporaryFolders(path);
       fprintf('Cleanup complete.\n\n');
    end

    % Display completion message
    fprintf('Prostate segmentation process completed successfully.\n');
end
